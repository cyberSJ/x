// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
sourceCompatibility = 1.8
targetCompatibility = 1.8 

// Apply the plugin needed for signing using GnuPG. But this is not so relevant
// to actual jar signing I want.
//apply plugin: 'signing'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

// Create an executable jar that launches my application.
jar
{
    manifest
    {
        attributes(
            // Specify the entry point of the application.
            "Main-Class": "com.cybersj.jws.MyTopJPanel",
            // The permission field is the security related.
            "Permissions": "sandbox",
            // This is the application name.
            "Application-Name": "SungApp")
    }
}

// Jar signing method A: use ant.signjar().
jar.doLast 
{
    new File('build/sign').mkdirs();
    
    // For this command to work, generate a public/private key pair using
    // keytool command-line too.
    
    ant.signjar(destDir: 'build/sign',
                // Location of source jar. It was put by gradle by default.
                jar: 'build/libs/*.jar',
                // Alias used in naming my keypair using keytool
                alias: 'cyber',
                // storetype: 'jks' is important. If missing this function will
                // fail. JKS stands for Java Key Store.
                storetype: 'jks',
                // Location of the keystore file. The file is data type.
                keystore: '/home/cyber/keystore_cyber',
                // Password used to create the key pair.
                storepass: '123456',
                // Not sure what this is. Just copied from an example online.
                preservelastmodified: "true")
}

// This is not like signing jar like Java talks about. Java's jar signing is
// signing each file in the jar and putting the signature in the META-INF
// directory. This GnuPG signing is like treating the jar as some archive file,
// and signing the archive file (whic produces .asc file for the arcive file).
// GnuPG signing does not involve putting things in META-INF directory inside
// the jar file.
//signing {
//    useGpgCmd()
//    sign configurations.archives
//}